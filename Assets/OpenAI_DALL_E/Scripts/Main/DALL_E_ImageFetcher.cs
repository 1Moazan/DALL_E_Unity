using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.Networking;

namespace OpenAI_DALL_E.Scripts.Main
{
    public class DALL_E_ImageFetcher : MonoBehaviour
    {
        /// <summary>
        /// Api Key for Open AI API can be generated <see href="https://platform.openai.com/account/api-keys">HERE</see>
        /// </summary>
        public string apiKey;
        /// <summary>
        /// Invoked when Image has been generated by GetImageFromPrompt call
        /// (Sets texture to null in case of error)
        /// </summary>
        public Action<Texture2D> OnImageGenerated;
        private const string APILink = "https://api.openai.com/v1/images/generations";
        

        /// <summary>
        /// Get image using input data
        /// </summary>
        /// <param name="promptData"></param>
        public void GetImageFromPrompt(InputData promptData)
        {
            if (string.IsNullOrEmpty(apiKey))
            {
                Debug.LogError("Api Key is needed to access Open AI Api See Link :" +
                               "https://platform.openai.com/account/api-keys");
                return;
            }
            if (string.IsNullOrEmpty(promptData.prompt))
            {
                Debug.LogError("Input Prompt can not be empty");
                return;
            }
            StartCoroutine(SendRequest(promptData));
        }

        #region Main

        private IEnumerator SendRequest(InputData promptData)
        {
        
            string json = JsonUtility.ToJson(promptData);
        
            var request = new UnityWebRequest();
            request = new UnityWebRequest(APILink);
            request.uploadHandler = new UploadHandlerRaw(Encoding.UTF8.GetBytes(json));
            request.uploadHandler.contentType = "application/json";
            request.downloadHandler = new DownloadHandlerBuffer();
            request.method = UnityWebRequest.kHttpVerbPOST;
            request.SetRequestHeader("Authorization", "Bearer " + apiKey);
            yield return request.SendWebRequest();
        
            if (request.result != UnityWebRequest.Result.Success)
            {
                OnImageGenerated?.Invoke(null);
                Debug.Log(request.error);
            }
            else
            {
                Result res = JsonUtility.FromJson<Result>(request.downloadHandler.text);
                var textureRequest = UnityWebRequestTexture.GetTexture(res.data[0].url);
                textureRequest.SendWebRequest();
                yield return new WaitUntil(() => textureRequest.isDone);

                if (textureRequest.result == UnityWebRequest.Result.Success)
                {
                    Texture2D tex = DownloadHandlerTexture.GetContent(textureRequest);
                    OnImageGenerated?.Invoke(tex);

                }
                else
                {
                    OnImageGenerated?.Invoke(null);
                    Debug.Log(textureRequest.error);
                }

            }
        }

        #endregion

        #region Models

        [Serializable]
        public class InputData
        {
        
            public string prompt;
            public int n;
            public string size;
            /// <summary>
            /// Input data to generate Image from
            /// </summary>
            /// <param name="prompt">Input prompt as text</param>
            /// <param name="numberOfImages">Number of images to generate from prompt</param>
            /// <param name="size">Input to generate (size x size) image</param>
            public InputData(string prompt, int numberOfImages, int size)
            {
                this.prompt = prompt;
                n = numberOfImages;
                this.size = size+"x"+size;
            }
        }
    
        [Serializable]
        public class ReceivedData
        {
            public string url ;
        }

        [Serializable]
        public class Result
        {
            public int created ;
            public List<ReceivedData> data ;
        }
    
        public class ImageEvent : UnityEvent<List<Sprite>>{}

        #endregion
    }
}
